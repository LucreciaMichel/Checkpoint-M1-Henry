const { LinkedList } = require('../DS');
// ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è
//
//
// 8Ô∏è‚É£ ** EJERCICIO 8 LINKEDLIST** - tacharLista() 8Ô∏è‚É£ 
// 
// Lleg√≥ la hora de revisar el cat√°logo de ropa disponible! tendremos que tachar las que hayan se hayan agotado
// el stock
// Agregar al prototype de LinkedList el m√©todo üìÑ tacharLista() üìÑ el cu√°l recibir√° por par√°metros un array de strings,
// Tendr√°s que retornar una nueva lista en base a las prendas que hay en el array.
// Es decir, tendr√°s que agregar a la nueva lista los elementos que NO coincidan en la lista actual con el array.
//
// EJEMPLOS:
// Dada la siguiente lista de strings:
// ('Pantalon') ‚û° ('Zapatos') ‚û° ('Camisa') ‚û° ('Calcetines') ‚û° ('Gafas') ‚û° ('Sweater') ‚û°
//
// Y dado el siguiente array por par√°metros: ['Gafas', 'Zapatos']
// lista.tachar(array): Devuelve ‚û°
// ('Pantalon') ‚û° ('Camisa') ‚û° ('Calcetines') ‚û° ('Sweater') ‚û°
//
// REQUISITOS:
// üü¢ Retornar una NUEVA LinkedList en base a los elementos del arreglo recibido por par√°metros.
// üü¢ Si el arreglo viene vac√≠o retornar la LinkedList COMPLETA.
// Tip: Tanto las LinkedList como los arreglos, contendr√°n siempre strings.

LinkedList.prototype.tacharLista = function(array) {
    // Tu c√≥digo aqu√≠:
    if (array.length === 0) return this;
    for (let i = 0; i < array.length; i++) {
        let current = this.head;
        //lista vacia
        if (!current) return this;
        //si la lista tiene un solo nodo
        if (!current.next) {
            if (current.value === array[i]) {
                this.head = null;
            }
        }
        //se busca sobre el primer nodo
        if (current.next) {
            if (current.value === array[i]) {
                this.head = current.next;
            }
        }
        //lista de un nodo o mas
        while (current.next) {
            if (current.next.value === array[i]) {
                if (current.next.next) {
                    current.next = current.next.next;
                } else {
                    current.next = null;
                }
            }
            current = current.next;
        }
    }
    return this;
};


// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
    LinkedList
};